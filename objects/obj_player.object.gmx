<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sensitivity = 0.1; // use to mouse movement
max_spd = 5; // use to specific how fast the player can move
acc = 0.5; // actual acceleration
jump_height = 8; // for jumping

fb_vel = 0; // velocity to move forward and backward
rl_vel = 0; // right left velocity
z_vel = 0;

z = 0; // for 3d (x, y, z)
height = 32; // same as sprite size in this case

pitch = 0; // angle of 3d looking view

grav = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Mouse Control
direction -= sensitivity  * (display_mouse_get_x() - (display_get_width() * 0.5));
pitch += sensitivity * (display_mouse_get_y() - display_get_height() * 0.5);

// Limit the pitch
pitch = clamp(pitch, -80, 80);

// Lock the mouse to the center of the screen
display_mouse_set(display_get_width() * 0.5 , display_get_height() * 0.5);

// keyboard controls
var fb_keys = keyboard_check(ord('W')) - keyboard_check(ord('S'));
var rl_keys = keyboard_check(ord('D')) - keyboard_check(ord('A'));

fb_vel += fb_keys * acc;
rl_vel += rl_keys * acc;

// Limit the speed
fb_vel = clamp(fb_vel, -max_spd, max_spd);
rl_vel = clamp(rl_vel, -max_spd, max_spd);

// Declarete if moving 
if (fb_keys == 0 &amp;&amp; abs(fb_vel) &gt;= acc) {
    fb_vel -= sign(fb_vel) * acc;
} 

if (rl_keys == 0 &amp;&amp; abs(rl_vel) &gt;= acc) {
    rl_vel -= sign(rl_vel) * acc;
}

// translate the velocities in terms of x and y

var x_vel = lengthdir_x(fb_vel, direction) + lengthdir_x(rl_vel, direction - 90);
var y_vel = lengthdir_y(fb_vel, direction) + lengthdir_y(rl_vel, direction - 90);

// Set z_vel to be affected by gravity
if (!place_meeting_ext(x, y, z, par_solid)) {
    z_vel -= grav;
}

// press SPACE to JUMP
if (place_meeting_ext(x, y, z - 1, par_solid) &amp;&amp; keyboard_check_pressed(vk_space)) {
    z_vel += jump_height;
}

// Check for collisions and move
if (!place_meeting_ext(x + x_vel, y, z, par_solid)) {
    // if there is no solid object in the way, just move
    x += x_vel;    
} else {
    // If there is a solid object in the way, maybe we overshot, so take baby steps
    while(!place_meeting_ext(x + sign(x_vel), y, z, par_solid)) {
        x += sign(x_vel);
    }
    // Finally there is a solid object directly in front of us
    x_vel = 0;
}

// Check for collisions and move
if (!place_meeting_ext(x, y + y_vel, z, par_solid)) {
    // if there is no solid object in the way, just move
    y += y_vel;   
} else {
    // If there is a solid object in the way, maybe we overshot, so take baby steps
    while(!place_meeting_ext(x, y + sign(y_vel), z, par_solid)) {
        y += sign(y_vel);
    }
    // Finally there is a solid object directly in front of us
    y_vel = 0;
}

// check for collision and move in Z
if (!place_meeting_ext(x, y, z + z_vel, par_solid)) {
    // if there is no solid object in the way, just move
    z += z_vel;   
} else {
    // If there is a solid object in the way, maybe we overshot, so take baby steps
    while(!place_meeting_ext(x, y , z + sign(z_vel), par_solid)) {
        z += sign(z_vel);
    }
    // Finally there is a solid object directly in front of us
    z_vel = 0;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_player, 0, x, y, 1, 1, direction, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
